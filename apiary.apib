FORMAT: 1A
HOST: https://ec.int.bqws.io/

# EC (v1.0)
EC is an electronic commerce service.

# Group Product

## Create [/v1.0/product]

This enpoint allow to create product info. 


### Create new product [POST]
Header response Location: http://ec.int.bqreaders.com/v1.0/product/{newId}

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|422   |invalid_entity|JSON doesn't correspond to Product or is empty|

+ Request (application/json)

    + Headers

            Authorization : Bearer {token}                  

    + Body                                 

            {
                "price": 1,
                "currency" : "eur",
                "href" : "resource uri",
                "type" : "FromApiary"
            }
        
+ Response 201
       

## Read update and delete [/v1.0/product/{id}]

This enpoint allow to read, update and delete product info. 
    

### Get Product [GET]

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|404   |not_found|When product not exist.|

 
+ Request

    + Headers

            Authorization : Bearer {token}                  
        
+ Response 200 (application/json)

    + Body                                 

            {
                "id": "{productIDParameter}",
                "price": 1,
                "currency": "eur",
                "href": "resource uri",
                "type": "FromApiary"
            }

### Update Product [PUT]

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|404   |not_found|When product not exist.|
|422   |invalid_entity|JSON doesn't correspond to Product or is empty|
 
+ Request (application/json)
    + Headers

            Authorization : Bearer {token}                  

    + Body
    
            {
                "price": 2,
                "currency" : "dol",
                "href" : "2 resource uri"
            }
        
+ Response 204 



### Remove a Product [DELETE]
+ Request
    + Headers

            Authorization: Bearer {token}   
            Content-Length: 0

+ Response 204


# Group Order
API for start and administrate user order. Exists one order foreach user.
            

## Read update and delete [/v1.0/order/{id}]
A single Order object. Each user's order id is the same that the user's id. It is not necessary to create the order, it will be done the first time it is updated


### Retrieve a Order [GET]
###Errors###
|Status|Error|Description|
|------|-----|-----------|
|404  |not_found|Order not found|
|403  |fobidden|If the access_token is not associated with any user|

+ Request
    + Headers

            Authorization : Bearer {token}    
            
+ Response 200 (application/json)

        {"id": "{orderIDParameter}", "items":[{"productId":"productId1", "amount" : 1, "price": {"amount":10, "currency":"EUR"}}]}

### Update a Order [PUT]
###Errors###
|Status|Error|Description|
|------|-----|-----------|
|400|bad_request|Order request bad formed|
|403  |fobidden|If the access_token is not associated with any user|

+ Request (application/json)
    + Headers

            Authorization : Bearer {token}                  

    + Body
    
            {"state":"PREPARED|UPDATED", "items": [{"productId":"productId1", "amount" : 1, "price": {"amount":10, "currency":"EUR"}}, {"productId":"productId2", "amount" : 2, "price": {"amount":20, "currency":"EUR"}}]}
    
+ Response 204

### To empty a Order [DELETE]
+ Request
    + Headers

            Authorization: Bearer {token}   
            Content-Length: 0

+ Response 204

## Prepare order [/v1.0/order/{id}/prepare]
Checks if an order has all its prices up to date, otherwise, updates the order. Returns the order.

### Prepare order [POST]
###Errors###
|Status|Error|Description|
|------|-----|-----------|
|404  |not_found|Order not found|

+ Request
    + Headers

            Authorization : Bearer {token}                
    
+ Response 200 (application/json)

        {"state":"PREPARED|UPDATED", "items": [{"productId":"productId1", "amount" : 1, "price": {"amount":10, "currency":"EUR"}}, {"productId":"productId2", "amount" : 2, "price": {"amount":20, "currency":"EUR"}}]}

## Checkout order [/v1.0/order/{id}/checkout]
Checkout an order and generate a purchase asyncronously. Returns in Location header a link to the new purchase.

### Checkout order [POST]
###Errors###
|Status|Error|Description|
|------|-----|-----------|
|400|bad_request|Not payment methods selected|
|404  |not_found|Order not found|
|403  |fobidden|If the access_token is not associated with any user|
|423  |precondition_failed|If the order state is not PREPARED|

+ Request (application/json)
    + Headers

            Authorization : Bearer {token}                  

    + Body
    
            {
            "paymentMethodsIds": ["bankPaymentMethod1", "bankPaymentMethod2", "giftPaymentMethod"],
            "discountIds": ["discount1", "discount2"]
            }
    
+ Response 202
    + Headers
    
            Location: http://ec.int.bqreaders.com/v1.0/purchase/{newId}

# Group Purchase
API for view user purchase history

## Get purchases for the logged user [/v1.0/purchase]
Get purchases paginated

### Retrieve the purchases [GET]

###Parameters###
|Name|Description|Type|Default|Required
|----|-----------|----|:-----:|:------:|
|api:pageSize|Number of result returned in the page|Integer > 0|10||
|api:page|The page to be returned. Pages are zero-indexed|Integer >= 0|0||

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|403  |fobidden|If the access_token is not associated with any user|

+ Request
    + Headers

            Authorization : Bearer {token}    
            
+ Response 200 (application/json)

        [{"id": "purchase1"}, {"id": "purchase2"}]

# Group Payment Method
Add, get and delete payment methods.

## Payment methods [/v1.0/paymentmethod]
Add a payment method for the logged user an get his collections.

### Get payment methods [GET]
Get the payment method registered for a user.

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|403  |fobidden|If the access_token is not associated with any user|

+ Request
    + Headers

            Authorization : Bearer {token}   

+ Response 200 (application/json)

        [
        {
            "id":"paymentMethodId1", 
            "userId":"userId", 
            "type":"BANK_CARD", 
            "name", "myCard", 
            "reference":"123123123123", 
            "holderName":"Pepito Gimenez", 
            "cardNumber":"1213", 
            "credit":null,
            "onService":false
        },
        {
            "id":"paymentMethodId2", 
            "userId":"userId", 
            "type":"GIFT_CARD", 
            "name":"myGiftCard",
            "reference":"333442211", 
            "holderName":"Pepito Gimenez", 
            "cardNumber":null, 
            "credit":{"currency":"EUR", "amount":10},
            "onService":false
        },
        ... 
        ]

### Add payment method [POST]
Add a new payment method for the logged user

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|403  |fobidden|If the access_token is not associated with any user|
|403  |adyen_connection_refused|Adyen refuse the new payment method|
|500  |adyen_connection_error|Error when connecting with adyen|

+ Request (application/json)
    + Headers

            Authorization : Bearer {token}  
    
    + Body
    
            {
                "data":"qawpdqjwdioqnfafb201u20rh4f9bq94fq3bf", 
                "name":"myCard", 
                "remember":true
            }

+ Response 201

## Single payment method get and delete [/v1.0/paymentmethod/{id}]

### Get a single payment method [GET]
Get details of a single payment method by its id

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|404  |not_found|Payment method not found|

+ Request
    + Headers

            Authorization : Bearer {token}  
    

+ Response 200 (application/json)

        {
            "id":"paymentMethodId1", 
            "userId":"userId", 
            "type":"BANK_CARD", 
            "name", "myCard", 
            "reference":"123123123123", 
            "holderName":"Pepito Gimenez", 
            "cardNumber":"1213", 
            "credit":null,
            "onService":false
        }

### Delete payment method [DELETE]

###Errors###
|Status|Error|Description|
|------|-----|-----------|
|403  |fobidden|If the access_token is not associated with any user|
|423  |payment_method_blocked|When payment method is on service with a subscription or in  purchase in progress|
|500  |adyen_connection_error|Error when connecting with adyen|

+ Request
    + Headers

            Authorization : Bearer {token}  
    

+ Response 204



